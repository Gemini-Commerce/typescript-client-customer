/* tslint:disable */
/* eslint-disable */
/**
 * CDP Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const BulkUpdateRequestAction = {
    Enable: 'ENABLE',
    Disable: 'DISABLE',
    Delete: 'DELETE'
} as const;

export type BulkUpdateRequestAction = typeof BulkUpdateRequestAction[keyof typeof BulkUpdateRequestAction];


/**
 * 
 * @export
 * @interface CustomerAddCustomerToGroupRequest
 */
export interface CustomerAddCustomerToGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAddCustomerToGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddCustomerToGroupRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddCustomerToGroupRequest
     */
    'customerId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerAddressCreateRequest
 */
export interface CustomerAddressCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerAddressCreateRequest
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'vatNumber'?: string;
    /**
     * 
     * @type {CustomerAddressCreateRequestKind}
     * @memberof CustomerAddressCreateRequest
     */
    'kind'?: CustomerAddressCreateRequestKind;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerAddressCreateRequest
     */
    'default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCreateRequest
     */
    'country'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerAddressCreateRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerAddressCreateRequestKind = {
    Shipping: 'SHIPPING',
    Billing: 'BILLING',
    Both: 'BOTH'
} as const;

export type CustomerAddressCreateRequestKind = typeof CustomerAddressCreateRequestKind[keyof typeof CustomerAddressCreateRequestKind];


/**
 * 
 * @export
 * @interface CustomerAddressCustomerResponse
 */
export interface CustomerAddressCustomerResponse {
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerAddressCustomerResponse
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'vatNumber'?: string;
    /**
     * 
     * @type {CustomerAddressCustomerResponseKind}
     * @memberof CustomerAddressCustomerResponse
     */
    'kind'?: CustomerAddressCustomerResponseKind;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerAddressCustomerResponse
     */
    'default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressCustomerResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerAddressCustomerResponse
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerAddressCustomerResponseKind = {
    Shipping: 'SHIPPING',
    Billing: 'BILLING',
    Both: 'BOTH'
} as const;

export type CustomerAddressCustomerResponseKind = typeof CustomerAddressCustomerResponseKind[keyof typeof CustomerAddressCustomerResponseKind];


/**
 * 
 * @export
 * @interface CustomerAddressDeleteRequest
 */
export interface CustomerAddressDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressDeleteRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressDeleteRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressDeleteRequest
     */
    'addressId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerAddressDeleteResponse
 */
export interface CustomerAddressDeleteResponse {
    /**
     * 
     * @type {CustomerCustomerResponse}
     * @memberof CustomerAddressDeleteResponse
     */
    'customer'?: CustomerCustomerResponse;
}
/**
 * 
 * @export
 * @interface CustomerAddressEntity
 */
export interface CustomerAddressEntity {
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerAddressEntity
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'vatNumber'?: string;
    /**
     * 
     * @type {CustomerAddressEntityKind}
     * @memberof CustomerAddressEntity
     */
    'kind'?: CustomerAddressEntityKind;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerAddressEntity
     */
    'default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressEntity
     */
    'country'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerAddressEntity
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerAddressEntityKind = {
    Shipping: 'SHIPPING',
    Billing: 'BILLING',
    Both: 'BOTH'
} as const;

export type CustomerAddressEntityKind = typeof CustomerAddressEntityKind[keyof typeof CustomerAddressEntityKind];


/**
 * 
 * @export
 * @interface CustomerAddressUpdateRequest
 */
export interface CustomerAddressUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressUpdateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressUpdateRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressUpdateRequest
     */
    'id'?: string;
    /**
     * 
     * @type {CustomerAddressEntity}
     * @memberof CustomerAddressUpdateRequest
     */
    'address'?: CustomerAddressEntity;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddressUpdateRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerAddressUpdateResponse
 */
export interface CustomerAddressUpdateResponse {
    /**
     * 
     * @type {CustomerCustomerResponse}
     * @memberof CustomerAddressUpdateResponse
     */
    'customer'?: CustomerCustomerResponse;
}
/**
 * 
 * @export
 * @interface CustomerAssignAgentRequest
 */
export interface CustomerAssignAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAssignAgentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAssignAgentRequest
     */
    'agentGrn'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerAssignAgentRequest
     */
    'customerIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerBulkUpdateRequest
 */
export interface CustomerBulkUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerBulkUpdateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerBulkUpdateRequest
     */
    'customerIds'?: Array<string>;
    /**
     * 
     * @type {BulkUpdateRequestAction}
     * @memberof CustomerBulkUpdateRequest
     */
    'action'?: BulkUpdateRequestAction;
}


/**
 * 
 * @export
 * @interface CustomerBulkUpdateResponse
 */
export interface CustomerBulkUpdateResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerBulkUpdateResponse
     */
    'customerIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerConsent
 */
export interface CustomerConsent {
    /**
     * 
     * @type {string}
     * @memberof CustomerConsent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerConsent
     */
    'grn'?: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof CustomerConsent
     */
    'preferences'?: { [key: string]: boolean; };
    /**
     * 
     * @type {string}
     * @memberof CustomerConsent
     */
    'createdAt'?: string;
    /**
     * 
     * @type {CustomerConsentSource}
     * @memberof CustomerConsent
     */
    'source'?: CustomerConsentSource;
    /**
     * 
     * @type {string}
     * @memberof CustomerConsent
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerConsent
     */
    'subjectId'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerConsentSource = {
    Unknown: 'CONSENT_SOURCE_UNKNOWN',
    Frontend: 'CONSENT_SOURCE_FRONTEND',
    Backoffice: 'CONSENT_SOURCE_BACKOFFICE',
    Backend: 'CONSENT_SOURCE_BACKEND'
} as const;

export type CustomerConsentSource = typeof CustomerConsentSource[keyof typeof CustomerConsentSource];


/**
 * 
 * @export
 * @interface CustomerCreateConsentRequest
 */
export interface CustomerCreateConsentRequest {
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof CustomerCreateConsentRequest
     */
    'preferences'?: { [key: string]: boolean; };
}
/**
 * 
 * @export
 * @interface CustomerCreateGroupRequest
 */
export interface CustomerCreateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateGroupRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateGroupRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface CustomerCreateRequest
 */
export interface CustomerCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerCreateRequest
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCreateRequest
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'source'?: string;
    /**
     * 
     * @type {Array<CustomerAddressEntity>}
     * @memberof CustomerCreateRequest
     */
    'addresses'?: Array<CustomerAddressEntity>;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'nationality'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerCreateRequest
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCreateRequest
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {Array<CustomerNewsletterRequest>}
     * @memberof CustomerCreateRequest
     */
    'newsletters'?: Array<CustomerNewsletterRequest>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCreateRequest
     */
    'doNotNotify'?: boolean;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerCreateRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {CustomerPassword}
     * @memberof CustomerCreateRequest
     */
    'migratedPassword'?: CustomerPassword;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'certifiedEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'sdiCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'companyName'?: string;
    /**
     * 
     * @type {object}
     * @memberof CustomerCreateRequest
     */
    'additionalInfo'?: object;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CustomerCreateRequest
     */
    'externalIds'?: { [key: string]: string; };
    /**
     * 
     * @type {CustomerCreateConsentRequest}
     * @memberof CustomerCreateRequest
     */
    'consent'?: CustomerCreateConsentRequest;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateRequest
     */
    'aggregationId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerCreateSubscriberRequest
 */
export interface CustomerCreateSubscriberRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateSubscriberRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {CustomerSubscriberRequest}
     * @memberof CustomerCreateSubscriberRequest
     */
    'subscriber'?: CustomerSubscriberRequest;
}
/**
 * 
 * @export
 * @interface CustomerCustomerResponse
 */
export interface CustomerCustomerResponse {
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerCustomerResponse
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCustomerResponse
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'source'?: string;
    /**
     * 
     * @type {Array<CustomerAddressCustomerResponse>}
     * @memberof CustomerCustomerResponse
     */
    'addresses'?: Array<CustomerAddressCustomerResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'defaultBillingAddressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'defaultShippingAddressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerCustomerResponse
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCustomerResponse
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {Array<CustomerNewsletterResponse>}
     * @memberof CustomerCustomerResponse
     */
    'newsletters'?: Array<CustomerNewsletterResponse>;
    /**
     * 
     * @type {CustomerPassword}
     * @memberof CustomerCustomerResponse
     */
    'migratedPassword'?: CustomerPassword;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerCustomerResponse
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'certifiedEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'sdiCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'companyName'?: string;
    /**
     * 
     * @type {object}
     * @memberof CustomerCustomerResponse
     */
    'additionalInfo'?: object;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'market'?: string;
    /**
     * 
     * @type {Array<CustomerPermission>}
     * @memberof CustomerCustomerResponse
     */
    'permissions'?: Array<CustomerPermission>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CustomerCustomerResponse
     */
    'externalIds'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'agentGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerResponse
     */
    'aggregationId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerDeleteGroupRequest
 */
export interface CustomerDeleteGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerDeleteGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDeleteGroupRequest
     */
    'groupId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerDeleteGroupResponse
 */
export interface CustomerDeleteGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomerDeleteGroupResponse
     */
    'groupId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerEMFields
 */
export interface CustomerEMFields {
    /**
     * 
     * @type {string}
     * @memberof CustomerEMFields
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerEMFields
     */
    'entityType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerEMFields
     */
    'entityCode'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindByEmailRequest
 */
export interface CustomerFindByEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindByEmailRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindByEmailRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindByIdRequest
 */
export interface CustomerFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindByIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindByIdRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindManyRequest
 */
export interface CustomerFindManyRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindManyRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {CustomerFindManyRequestFilter}
     * @memberof CustomerFindManyRequest
     */
    'filter'?: CustomerFindManyRequestFilter;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyRequest
     */
    'filterMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindManyRequestFilter
 */
export interface CustomerFindManyRequestFilter {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerFindManyRequestFilter
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyRequestFilter
     */
    'agentGrn'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindManyResponse
 */
export interface CustomerFindManyResponse {
    /**
     * 
     * @type {Array<CustomerCustomerResponse>}
     * @memberof CustomerFindManyResponse
     */
    'customers'?: Array<CustomerCustomerResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindManyResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindSubscriberByEmailRequest
 */
export interface CustomerFindSubscriberByEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindSubscriberByEmailRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindSubscriberByEmailRequest
     */
    'subscriberEmail'?: string;
}
/**
 * 
 * @export
 * @interface CustomerFindSubscriberByIdRequest
 */
export interface CustomerFindSubscriberByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindSubscriberByIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindSubscriberByIdRequest
     */
    'subscriberId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGetGroupByCodeRequest
 */
export interface CustomerGetGroupByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerGetGroupByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGetGroupByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGetGroupByIdRequest
 */
export interface CustomerGetGroupByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerGetGroupByIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGetGroupByIdRequest
     */
    'groupId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGrantPermissionsRequest
 */
export interface CustomerGrantPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerGrantPermissionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGrantPermissionsRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {Array<CustomerPermission>}
     * @memberof CustomerGrantPermissionsRequest
     */
    'permissions'?: Array<CustomerPermission>;
}
/**
 * 
 * @export
 * @interface CustomerGroupResponse
 */
export interface CustomerGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerGroupResponse
     */
    'customerIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupResponse
     */
    'customerCount'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListConsentsRequest
 */
export interface CustomerListConsentsRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerListConsentsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerListConsentsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerListConsentsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {Array<ListConsentsRequestSort>}
     * @memberof CustomerListConsentsRequest
     */
    'sorts'?: Array<ListConsentsRequestSort>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListConsentsRequest
     */
    'filtersMask'?: string;
    /**
     * 
     * @type {ListConsentsRequestFilters}
     * @memberof CustomerListConsentsRequest
     */
    'filters'?: ListConsentsRequestFilters;
}
/**
 * 
 * @export
 * @interface CustomerListConsentsResponse
 */
export interface CustomerListConsentsResponse {
    /**
     * 
     * @type {Array<CustomerConsent>}
     * @memberof CustomerListConsentsResponse
     */
    'consents'?: Array<CustomerConsent>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListConsentsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListCustomersRequest
 */
export interface CustomerListCustomersRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerListCustomersRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerListCustomersRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerListCustomersRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {CustomerListCustomersRequestFilter}
     * @memberof CustomerListCustomersRequest
     */
    'filters'?: CustomerListCustomersRequestFilter;
    /**
     * 
     * @type {string}
     * @memberof CustomerListCustomersRequest
     */
    'filterMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListCustomersRequestFilter
 */
export interface CustomerListCustomersRequestFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerListCustomersRequestFilter
     */
    'genders'?: Array<string>;
    /**
     * 
     * @type {Array<ListCustomersRequestFilterDate>}
     * @memberof CustomerListCustomersRequestFilter
     */
    'createdAt'?: Array<ListCustomersRequestFilterDate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerListCustomersRequestFilter
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListCustomersRequestFilter
     */
    'agentGrn'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListCustomersResponse
 */
export interface CustomerListCustomersResponse {
    /**
     * 
     * @type {Array<CustomerCustomerResponse>}
     * @memberof CustomerListCustomersResponse
     */
    'customers'?: Array<CustomerCustomerResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListCustomersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListGroupsRequest
 */
export interface CustomerListGroupsRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerListGroupsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerListGroupsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerListGroupsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {CustomerListGroupsRequestFilter}
     * @memberof CustomerListGroupsRequest
     */
    'filter'?: CustomerListGroupsRequestFilter;
    /**
     * 
     * @type {string}
     * @memberof CustomerListGroupsRequest
     */
    'filtersMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListGroupsRequestFilter
 */
export interface CustomerListGroupsRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof CustomerListGroupsRequestFilter
     */
    'searchTerm'?: string;
}
/**
 * 
 * @export
 * @interface CustomerListGroupsResponse
 */
export interface CustomerListGroupsResponse {
    /**
     * 
     * @type {Array<CustomerGroupResponse>}
     * @memberof CustomerListGroupsResponse
     */
    'groups'?: Array<CustomerGroupResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListGroupsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface CustomerNewsletterRequest
 */
export interface CustomerNewsletterRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerNewsletterRequest
     */
    'newsletterGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerNewsletterRequest
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerNewsletterRequest
     */
    'subscribed'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomerNewsletterResponse
 */
export interface CustomerNewsletterResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomerNewsletterResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerNewsletterResponse
     */
    'newsletterGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerNewsletterResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerPassword
 */
export interface CustomerPassword {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CustomerPassword
     */
    'data'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof CustomerPassword
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {PasswordPasswordType}
     * @memberof CustomerPassword
     */
    'type'?: PasswordPasswordType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerPermission = {
    Unknown: 'PERMISSION_UNKNOWN',
    Login: 'PERMISSION_LOGIN',
    Buy: 'PERMISSION_BUY'
} as const;

export type CustomerPermission = typeof CustomerPermission[keyof typeof CustomerPermission];


/**
 * 
 * @export
 * @interface CustomerRemoveCustomerFromGroupRequest
 */
export interface CustomerRemoveCustomerFromGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveCustomerFromGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveCustomerFromGroupRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveCustomerFromGroupRequest
     */
    'customerId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerRemoveDefaultAddressRequest
 */
export interface CustomerRemoveDefaultAddressRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveDefaultAddressRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveDefaultAddressRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRemoveDefaultAddressRequest
     */
    'addressId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerRevokePermissionsRequest
 */
export interface CustomerRevokePermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerRevokePermissionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRevokePermissionsRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {Array<CustomerPermission>}
     * @memberof CustomerRevokePermissionsRequest
     */
    'permissions'?: Array<CustomerPermission>;
}
/**
 * 
 * @export
 * @interface CustomerSearchRequest
 */
export interface CustomerSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequest
     */
    'query'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerSearchRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {CustomerSearchRequestFilter}
     * @memberof CustomerSearchRequest
     */
    'filter'?: CustomerSearchRequestFilter;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequest
     */
    'filterMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerSearchRequestFilter
 */
export interface CustomerSearchRequestFilter {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSearchRequestFilter
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchRequestFilter
     */
    'agentGrn'?: string;
}
/**
 * 
 * @export
 * @interface CustomerSearchResponse
 */
export interface CustomerSearchResponse {
    /**
     * 
     * @type {Array<CustomerCustomerResponse>}
     * @memberof CustomerSearchResponse
     */
    'customers'?: Array<CustomerCustomerResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerSearchResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface CustomerSetDefaultAddressRequest
 */
export interface CustomerSetDefaultAddressRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerSetDefaultAddressRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSetDefaultAddressRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSetDefaultAddressRequest
     */
    'addressId'?: string;
}
/**
 * 
 * @export
 * @interface CustomerSetPermissionsRequest
 */
export interface CustomerSetPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerSetPermissionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSetPermissionsRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {Array<CustomerPermission>}
     * @memberof CustomerSetPermissionsRequest
     */
    'permissions'?: Array<CustomerPermission>;
}
/**
 * 
 * @export
 * @interface CustomerSubscriberRequest
 */
export interface CustomerSubscriberRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'nationality'?: string;
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerSubscriberRequest
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<CustomerNewsletterRequest>}
     * @memberof CustomerSubscriberRequest
     */
    'newsletters'?: Array<CustomerNewsletterRequest>;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberRequest
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {CustomerCreateConsentRequest}
     * @memberof CustomerSubscriberRequest
     */
    'consent'?: CustomerCreateConsentRequest;
}
/**
 * 
 * @export
 * @interface CustomerSubscriberResponse
 */
export interface CustomerSubscriberResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'nationality'?: string;
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerSubscriberResponse
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<CustomerNewsletterResponse>}
     * @memberof CustomerSubscriberResponse
     */
    'newsletters'?: Array<CustomerNewsletterResponse>;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponse
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerSubscriberResponse
     */
    'customerGroups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerSubscriberResponseWithNewsletterRequest
 */
export interface CustomerSubscriberResponseWithNewsletterRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'nationality'?: string;
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<CustomerNewsletterRequest>}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'newsletters'?: Array<CustomerNewsletterRequest>;
    /**
     * 
     * @type {CustomerCreateConsentRequest}
     * @memberof CustomerSubscriberResponseWithNewsletterRequest
     */
    'consent'?: CustomerCreateConsentRequest;
}
/**
 * 
 * @export
 * @interface CustomerUnassignAgentRequest
 */
export interface CustomerUnassignAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerUnassignAgentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUnassignAgentRequest
     */
    'agentGrn'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerUnassignAgentRequest
     */
    'customerIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerUnsubscribeRequest
 */
export interface CustomerUnsubscribeRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerUnsubscribeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUnsubscribeRequest
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerUnsubscribeRequest
     */
    'newsletterGrn'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerUnsubscribeResponse
 */
export interface CustomerUnsubscribeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerUnsubscribeResponse
     */
    'response'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerUnsubscribeResponse
     */
    'subscriberExist'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerUnsubscribeResponse
     */
    'activeNewsletterGrn'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CustomerUpdateGroupRequest
 */
export interface CustomerUpdateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateGroupRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {CustomerUpdateGroupRequestPayload}
     * @memberof CustomerUpdateGroupRequest
     */
    'payload'?: CustomerUpdateGroupRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateGroupRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerUpdateGroupRequestPayload
 */
export interface CustomerUpdateGroupRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateGroupRequestPayload
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerUpdateRequest
 */
export interface CustomerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequest
     */
    'customerId'?: string;
    /**
     * 
     * @type {CustomerUpdateRequestPayload}
     * @memberof CustomerUpdateRequest
     */
    'payload'?: CustomerUpdateRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface CustomerUpdateRequestPayload
 */
export interface CustomerUpdateRequestPayload {
    /**
     * 
     * @type {CustomerEMFields}
     * @memberof CustomerUpdateRequestPayload
     */
    'em'?: CustomerEMFields;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'gender'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerUpdateRequestPayload
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'source'?: string;
    /**
     * 
     * @type {Array<CustomerAddressEntity>}
     * @memberof CustomerUpdateRequestPayload
     */
    'addresses'?: Array<CustomerAddressEntity>;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'defaultBillingAddressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'defaultShippingAddressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'nationality'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerUpdateRequestPayload
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerUpdateRequestPayload
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {Array<CustomerNewsletterRequest>}
     * @memberof CustomerUpdateRequestPayload
     */
    'newsletters'?: Array<CustomerNewsletterRequest>;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof CustomerUpdateRequestPayload
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {CustomerPassword}
     * @memberof CustomerUpdateRequestPayload
     */
    'migratedPassword'?: CustomerPassword;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'preferredLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'certifiedEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'sdiCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'companyName'?: string;
    /**
     * 
     * @type {object}
     * @memberof CustomerUpdateRequestPayload
     */
    'additionalInfo'?: object;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateRequestPayload
     */
    'market'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CustomerUpdateRequestPayload
     */
    'externalIds'?: { [key: string]: string; };
    /**
     * 
     * @type {CustomerCreateConsentRequest}
     * @memberof CustomerUpdateRequestPayload
     */
    'consent'?: CustomerCreateConsentRequest;
}
/**
 * 
 * @export
 * @interface CustomerUpdateSubscriberRequest
 */
export interface CustomerUpdateSubscriberRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateSubscriberRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {CustomerSubscriberResponseWithNewsletterRequest}
     * @memberof CustomerUpdateSubscriberRequest
     */
    'subscriber'?: CustomerSubscriberResponseWithNewsletterRequest;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateSubscriberRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface GooglerpcStatus
 */
export interface GooglerpcStatus {
    /**
     * 
     * @type {number}
     * @memberof GooglerpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GooglerpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof GooglerpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface ListConsentsRequestFilters
 */
export interface ListConsentsRequestFilters {
    /**
     * 
     * @type {Array<string>}
     * @memberof ListConsentsRequestFilters
     */
    'subjectIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListConsentsRequestSort
 */
export interface ListConsentsRequestSort {
    /**
     * 
     * @type {SortSortField}
     * @memberof ListConsentsRequestSort
     */
    'field'?: SortSortField;
    /**
     * 
     * @type {SortSortOrder}
     * @memberof ListConsentsRequestSort
     */
    'order'?: SortSortOrder;
}


/**
 * 
 * @export
 * @interface ListCustomersRequestFilterDate
 */
export interface ListCustomersRequestFilterDate {
    /**
     * 
     * @type {string}
     * @memberof ListCustomersRequestFilterDate
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCustomersRequestFilterDate
     */
    'to'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PasswordPasswordType = {
    Unknown: 'PASSWORD_TYPE_UNKNOWN',
    Magento1: 'PASSWORD_TYPE_MAGENTO1',
    Sylius: 'PASSWORD_TYPE_SYLIUS',
    Magento2: 'PASSWORD_TYPE_MAGENTO2'
} as const;

export type PasswordPasswordType = typeof PasswordPasswordType[keyof typeof PasswordPasswordType];


/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON  The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */

export const ProtobufNullValue = {
    NullValue: 'NULL_VALUE'
} as const;

export type ProtobufNullValue = typeof ProtobufNullValue[keyof typeof ProtobufNullValue];


/**
 * 
 * @export
 * @enum {string}
 */

export const SortSortField = {
    Unknown: 'UNKNOWN',
    Date: 'DATE'
} as const;

export type SortSortField = typeof SortSortField[keyof typeof SortSortField];


/**
 * 
 * @export
 * @enum {string}
 */

export const SortSortOrder = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;

export type SortSortOrder = typeof SortSortOrder[keyof typeof SortSortOrder];



/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireSubscriber: async (body: CustomerCreateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAcquireSubscriber', 'body', body)
            const localVarPath = `/customer/acquire_subscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireSubscriber2: async (body: CustomerCreateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAcquireSubscriber2', 'body', body)
            const localVarPath = `/customer.Customer/AcquireSubscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireUnsubscriber: async (body: CustomerUnsubscribeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAcquireUnsubscriber', 'body', body)
            const localVarPath = `/customer/acquire_unsubscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireUnsubscriber2: async (body: CustomerUnsubscribeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAcquireUnsubscriber2', 'body', body)
            const localVarPath = `/customer.Customer/AcquireUnsubscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddCustomerToGroup: async (body: CustomerAddCustomerToGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAddCustomerToGroup', 'body', body)
            const localVarPath = `/customer/add_customer_to_segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddCustomerToGroup2: async (body: CustomerAddCustomerToGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAddCustomerToGroup2', 'body', body)
            const localVarPath = `/customer.Customer/AddCustomerToGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAssignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAssignAgent: async (body: CustomerAssignAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerAssignAgent', 'body', body)
            const localVarPath = `/customer.Customer/AssignAgent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBulkUpdate: async (body: CustomerBulkUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerBulkUpdate', 'body', body)
            const localVarPath = `/customer/bulk_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBulkUpdate2: async (body: CustomerBulkUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerBulkUpdate2', 'body', body)
            const localVarPath = `/customer.Customer/BulkUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate: async (body: CustomerCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreate', 'body', body)
            const localVarPath = `/customer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate2: async (body: CustomerCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreate2', 'body', body)
            const localVarPath = `/customer.Customer/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateAddress: async (body: CustomerAddressCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateAddress', 'body', body)
            const localVarPath = `/customer/create_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateAddress2: async (body: CustomerAddressCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateAddress2', 'body', body)
            const localVarPath = `/customer.Customer/CreateAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateGroup: async (body: CustomerCreateGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateGroup', 'body', body)
            const localVarPath = `/customer/create_segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateGroup2: async (body: CustomerCreateGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateGroup2', 'body', body)
            const localVarPath = `/customer.Customer/CreateGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateSubscriber: async (body: CustomerCreateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateSubscriber', 'body', body)
            const localVarPath = `/customer/create_subscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateSubscriber2: async (body: CustomerCreateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerCreateSubscriber2', 'body', body)
            const localVarPath = `/customer.Customer/CreateSubscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteAddress: async (body: CustomerAddressDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerDeleteAddress', 'body', body)
            const localVarPath = `/customer/delete_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteAddress2: async (body: CustomerAddressDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerDeleteAddress2', 'body', body)
            const localVarPath = `/customer.Customer/DeleteAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteGroup: async (body: CustomerDeleteGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerDeleteGroup', 'body', body)
            const localVarPath = `/customer/delete_segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteGroup2: async (body: CustomerDeleteGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerDeleteGroup2', 'body', body)
            const localVarPath = `/customer.Customer/DeleteGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFind: async (body: CustomerFindManyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFind', 'body', body)
            const localVarPath = `/customer/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFind2: async (body: CustomerFindManyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFind2', 'body', body)
            const localVarPath = `/customer.Customer/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindByEmail: async (body: CustomerFindByEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindByEmail', 'body', body)
            const localVarPath = `/customer/find_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindByEmail2: async (body: CustomerFindByEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindByEmail2', 'body', body)
            const localVarPath = `/customer.Customer/FindByEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindById: async (body: CustomerFindByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindById', 'body', body)
            const localVarPath = `/customer/find_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindById2: async (body: CustomerFindByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindById2', 'body', body)
            const localVarPath = `/customer.Customer/FindById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberByEmail: async (body: CustomerFindSubscriberByEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindSubscriberByEmail', 'body', body)
            const localVarPath = `/customer/find_subscriber_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberByEmail2: async (body: CustomerFindSubscriberByEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindSubscriberByEmail2', 'body', body)
            const localVarPath = `/customer.Customer/FindSubscriberByEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberById: async (body: CustomerFindSubscriberByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindSubscriberById', 'body', body)
            const localVarPath = `/customer/find_subscriber_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberById2: async (body: CustomerFindSubscriberByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerFindSubscriberById2', 'body', body)
            const localVarPath = `/customer.Customer/FindSubscriberById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupByCode: async (body: CustomerGetGroupByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGetGroupByCode', 'body', body)
            const localVarPath = `/customer/get_segment_by_code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupByCode2: async (body: CustomerGetGroupByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGetGroupByCode2', 'body', body)
            const localVarPath = `/customer.Customer/GetGroupByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupById: async (body: CustomerGetGroupByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGetGroupById', 'body', body)
            const localVarPath = `/customer/get_segment_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupById2: async (body: CustomerGetGroupByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGetGroupById2', 'body', body)
            const localVarPath = `/customer.Customer/GetGroupById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGrantPermissions: async (body: CustomerGrantPermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGrantPermissions', 'body', body)
            const localVarPath = `/customer/grant_permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGrantPermissions2: async (body: CustomerGrantPermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerGrantPermissions2', 'body', body)
            const localVarPath = `/customer.Customer/GrantPermissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListConsents list all consents of a customer
         * @param {CustomerListConsentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListConsents: async (body: CustomerListConsentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerListConsents', 'body', body)
            const localVarPath = `/customer.Customer/ListConsents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListCustomers: async (body: CustomerListCustomersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerListCustomers', 'body', body)
            const localVarPath = `/customer/list_customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListCustomers2: async (body: CustomerListCustomersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerListCustomers2', 'body', body)
            const localVarPath = `/customer.Customer/ListCustomers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListGroups: async (body: CustomerListGroupsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerListGroups', 'body', body)
            const localVarPath = `/customer/list_segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListGroups2: async (body: CustomerListGroupsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerListGroups2', 'body', body)
            const localVarPath = `/customer.Customer/ListGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveCustomerFromGroup: async (body: CustomerRemoveCustomerFromGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRemoveCustomerFromGroup', 'body', body)
            const localVarPath = `/customer/remove_customer_from_segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveCustomerFromGroup2: async (body: CustomerRemoveCustomerFromGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRemoveCustomerFromGroup2', 'body', body)
            const localVarPath = `/customer.Customer/RemoveCustomerFromGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveDefaultAddress: async (body: CustomerRemoveDefaultAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRemoveDefaultAddress', 'body', body)
            const localVarPath = `/customer/remove_default_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveDefaultAddress2: async (body: CustomerRemoveDefaultAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRemoveDefaultAddress2', 'body', body)
            const localVarPath = `/customer.Customer/RemoveDefaultAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRevokePermissions: async (body: CustomerRevokePermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRevokePermissions', 'body', body)
            const localVarPath = `/customer/revoke_permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRevokePermissions2: async (body: CustomerRevokePermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerRevokePermissions2', 'body', body)
            const localVarPath = `/customer.Customer/RevokePermissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch: async (body: CustomerSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSearch', 'body', body)
            const localVarPath = `/customer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch2: async (body: CustomerSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSearch2', 'body', body)
            const localVarPath = `/customer.Customer/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetDefaultAddress: async (body: CustomerSetDefaultAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSetDefaultAddress', 'body', body)
            const localVarPath = `/customer/set_default_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetDefaultAddress2: async (body: CustomerSetDefaultAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSetDefaultAddress2', 'body', body)
            const localVarPath = `/customer.Customer/SetDefaultAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetPermissions: async (body: CustomerSetPermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSetPermissions', 'body', body)
            const localVarPath = `/customer/set_permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetPermissions2: async (body: CustomerSetPermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerSetPermissions2', 'body', body)
            const localVarPath = `/customer.Customer/SetPermissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUnassignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnassignAgent: async (body: CustomerUnassignAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUnassignAgent', 'body', body)
            const localVarPath = `/customer.Customer/UnassignAgent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnsubscribe: async (body: CustomerUnsubscribeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUnsubscribe', 'body', body)
            const localVarPath = `/customer/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnsubscribe2: async (body: CustomerUnsubscribeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUnsubscribe2', 'body', body)
            const localVarPath = `/customer.Customer/Unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate: async (body: CustomerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdate', 'body', body)
            const localVarPath = `/customer/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate2: async (body: CustomerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdate2', 'body', body)
            const localVarPath = `/customer.Customer/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateAddress: async (body: CustomerAddressUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateAddress', 'body', body)
            const localVarPath = `/customer/update_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateAddress2: async (body: CustomerAddressUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateAddress2', 'body', body)
            const localVarPath = `/customer.Customer/UpdateAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateGroup: async (body: CustomerUpdateGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateGroup', 'body', body)
            const localVarPath = `/customer/update_segment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateGroup2: async (body: CustomerUpdateGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateGroup2', 'body', body)
            const localVarPath = `/customer.Customer/UpdateGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateSubscriber: async (body: CustomerUpdateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateSubscriber', 'body', body)
            const localVarPath = `/customer/update_subscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateSubscriber2: async (body: CustomerUpdateSubscriberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('customerUpdateSubscriber2', 'body', body)
            const localVarPath = `/customer.Customer/UpdateSubscriber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAcquireSubscriber(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAcquireSubscriber(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAcquireSubscriber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAcquireSubscriber2(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAcquireSubscriber2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAcquireSubscriber2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAcquireUnsubscriber(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerUnsubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAcquireUnsubscriber(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAcquireUnsubscriber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAcquireUnsubscriber2(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerUnsubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAcquireUnsubscriber2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAcquireUnsubscriber2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddCustomerToGroup(body: CustomerAddCustomerToGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddCustomerToGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAddCustomerToGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddCustomerToGroup2(body: CustomerAddCustomerToGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddCustomerToGroup2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAddCustomerToGroup2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAssignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAssignAgent(body: CustomerAssignAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAssignAgent(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerAssignAgent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerBulkUpdate(body: CustomerBulkUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBulkUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerBulkUpdate(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerBulkUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerBulkUpdate2(body: CustomerBulkUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBulkUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerBulkUpdate2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerBulkUpdate2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreate(body: CustomerCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreate(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreate2(body: CustomerCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreate2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreate2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateAddress(body: CustomerAddressCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateAddress(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateAddress']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateAddress2(body: CustomerAddressCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateAddress2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateAddress2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateGroup(body: CustomerCreateGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateGroup2(body: CustomerCreateGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateGroup2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateGroup2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateSubscriber(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateSubscriber(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateSubscriber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreateSubscriber2(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreateSubscriber2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerCreateSubscriber2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDeleteAddress(body: CustomerAddressDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDeleteAddress(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerDeleteAddress']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDeleteAddress2(body: CustomerAddressDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDeleteAddress2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerDeleteAddress2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDeleteGroup(body: CustomerDeleteGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDeleteGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDeleteGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerDeleteGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDeleteGroup2(body: CustomerDeleteGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDeleteGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDeleteGroup2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerDeleteGroup2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFind(body: CustomerFindManyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindManyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFind(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFind']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFind2(body: CustomerFindManyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindManyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFind2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFind2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindByEmail(body: CustomerFindByEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindByEmail(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindByEmail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindByEmail2(body: CustomerFindByEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindByEmail2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindByEmail2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindById(body: CustomerFindByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindById(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindById2(body: CustomerFindByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindById2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindById2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindSubscriberByEmail(body: CustomerFindSubscriberByEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindSubscriberByEmail(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindSubscriberByEmail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindSubscriberByEmail2(body: CustomerFindSubscriberByEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindSubscriberByEmail2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindSubscriberByEmail2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindSubscriberById(body: CustomerFindSubscriberByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindSubscriberById(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindSubscriberById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFindSubscriberById2(body: CustomerFindSubscriberByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFindSubscriberById2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerFindSubscriberById2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGetGroupByCode(body: CustomerGetGroupByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGetGroupByCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGetGroupByCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGetGroupByCode2(body: CustomerGetGroupByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGetGroupByCode2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGetGroupByCode2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGetGroupById(body: CustomerGetGroupByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGetGroupById(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGetGroupById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGetGroupById2(body: CustomerGetGroupByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGetGroupById2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGetGroupById2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGrantPermissions(body: CustomerGrantPermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGrantPermissions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGrantPermissions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGrantPermissions2(body: CustomerGrantPermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGrantPermissions2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerGrantPermissions2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ListConsents list all consents of a customer
         * @param {CustomerListConsentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListConsents(body: CustomerListConsentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListConsentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListConsents(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerListConsents']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListCustomers(body: CustomerListCustomersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListCustomers(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerListCustomers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListCustomers2(body: CustomerListCustomersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListCustomers2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerListCustomers2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListGroups(body: CustomerListGroupsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListGroups(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerListGroups']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListGroups2(body: CustomerListGroupsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListGroups2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerListGroups2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRemoveCustomerFromGroup(body: CustomerRemoveCustomerFromGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRemoveCustomerFromGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRemoveCustomerFromGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRemoveCustomerFromGroup2(body: CustomerRemoveCustomerFromGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRemoveCustomerFromGroup2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRemoveCustomerFromGroup2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRemoveDefaultAddress(body: CustomerRemoveDefaultAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRemoveDefaultAddress(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRemoveDefaultAddress']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRemoveDefaultAddress2(body: CustomerRemoveDefaultAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRemoveDefaultAddress2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRemoveDefaultAddress2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRevokePermissions(body: CustomerRevokePermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRevokePermissions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRevokePermissions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerRevokePermissions2(body: CustomerRevokePermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerRevokePermissions2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerRevokePermissions2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSearch(body: CustomerSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSearch(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSearch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSearch2(body: CustomerSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSearch2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSearch2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSetDefaultAddress(body: CustomerSetDefaultAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSetDefaultAddress(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSetDefaultAddress']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSetDefaultAddress2(body: CustomerSetDefaultAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSetDefaultAddress2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSetDefaultAddress2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSetPermissions(body: CustomerSetPermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSetPermissions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSetPermissions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSetPermissions2(body: CustomerSetPermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSetPermissions2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerSetPermissions2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUnassignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUnassignAgent(body: CustomerUnassignAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUnassignAgent(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUnassignAgent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUnsubscribe(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerUnsubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUnsubscribe(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUnsubscribe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUnsubscribe2(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerUnsubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUnsubscribe2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUnsubscribe2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdate(body: CustomerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdate(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdate2(body: CustomerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdate2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdate2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateAddress(body: CustomerAddressUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateAddress(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateAddress']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateAddress2(body: CustomerAddressUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateAddress2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateAddress2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateGroup(body: CustomerUpdateGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateGroup2(body: CustomerUpdateGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateGroup2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateGroup2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateSubscriber(body: CustomerUpdateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateSubscriber(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateSubscriber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdateSubscriber2(body: CustomerUpdateSubscriberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdateSubscriber2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerApi.customerUpdateSubscriber2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireSubscriber(body: CustomerCreateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerAcquireSubscriber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireSubscriber2(body: CustomerCreateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerAcquireSubscriber2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireUnsubscriber(body: CustomerUnsubscribeRequest, options?: any): AxiosPromise<CustomerUnsubscribeResponse> {
            return localVarFp.customerAcquireUnsubscriber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAcquireUnsubscriber2(body: CustomerUnsubscribeRequest, options?: any): AxiosPromise<CustomerUnsubscribeResponse> {
            return localVarFp.customerAcquireUnsubscriber2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddCustomerToGroup(body: CustomerAddCustomerToGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerAddCustomerToGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddCustomerToGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddCustomerToGroup2(body: CustomerAddCustomerToGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerAddCustomerToGroup2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAssignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAssignAgent(body: CustomerAssignAgentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerAssignAgent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBulkUpdate(body: CustomerBulkUpdateRequest, options?: any): AxiosPromise<CustomerBulkUpdateResponse> {
            return localVarFp.customerBulkUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBulkUpdate2(body: CustomerBulkUpdateRequest, options?: any): AxiosPromise<CustomerBulkUpdateResponse> {
            return localVarFp.customerBulkUpdate2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate(body: CustomerCreateRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate2(body: CustomerCreateRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerCreate2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateAddress(body: CustomerAddressCreateRequest, options?: any): AxiosPromise<CustomerAddressCustomerResponse> {
            return localVarFp.customerCreateAddress(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateAddress2(body: CustomerAddressCreateRequest, options?: any): AxiosPromise<CustomerAddressCustomerResponse> {
            return localVarFp.customerCreateAddress2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateGroup(body: CustomerCreateGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerCreateGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateGroup2(body: CustomerCreateGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerCreateGroup2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateSubscriber(body: CustomerCreateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerCreateSubscriber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerCreateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreateSubscriber2(body: CustomerCreateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerCreateSubscriber2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteAddress(body: CustomerAddressDeleteRequest, options?: any): AxiosPromise<CustomerAddressDeleteResponse> {
            return localVarFp.customerDeleteAddress(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteAddress2(body: CustomerAddressDeleteRequest, options?: any): AxiosPromise<CustomerAddressDeleteResponse> {
            return localVarFp.customerDeleteAddress2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteGroup(body: CustomerDeleteGroupRequest, options?: any): AxiosPromise<CustomerDeleteGroupResponse> {
            return localVarFp.customerDeleteGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerDeleteGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDeleteGroup2(body: CustomerDeleteGroupRequest, options?: any): AxiosPromise<CustomerDeleteGroupResponse> {
            return localVarFp.customerDeleteGroup2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFind(body: CustomerFindManyRequest, options?: any): AxiosPromise<CustomerFindManyResponse> {
            return localVarFp.customerFind(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindManyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFind2(body: CustomerFindManyRequest, options?: any): AxiosPromise<CustomerFindManyResponse> {
            return localVarFp.customerFind2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindByEmail(body: CustomerFindByEmailRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerFindByEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindByEmail2(body: CustomerFindByEmailRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerFindByEmail2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindById(body: CustomerFindByIdRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerFindById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindById2(body: CustomerFindByIdRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerFindById2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberByEmail(body: CustomerFindSubscriberByEmailRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerFindSubscriberByEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindSubscriberByEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberByEmail2(body: CustomerFindSubscriberByEmailRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerFindSubscriberByEmail2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberById(body: CustomerFindSubscriberByIdRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerFindSubscriberById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerFindSubscriberByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFindSubscriberById2(body: CustomerFindSubscriberByIdRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerFindSubscriberById2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupByCode(body: CustomerGetGroupByCodeRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerGetGroupByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGetGroupByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupByCode2(body: CustomerGetGroupByCodeRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerGetGroupByCode2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupById(body: CustomerGetGroupByIdRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerGetGroupById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGetGroupByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetGroupById2(body: CustomerGetGroupByIdRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerGetGroupById2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGrantPermissions(body: CustomerGrantPermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerGrantPermissions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerGrantPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGrantPermissions2(body: CustomerGrantPermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerGrantPermissions2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListConsents list all consents of a customer
         * @param {CustomerListConsentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListConsents(body: CustomerListConsentsRequest, options?: any): AxiosPromise<CustomerListConsentsResponse> {
            return localVarFp.customerListConsents(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListCustomers(body: CustomerListCustomersRequest, options?: any): AxiosPromise<CustomerListCustomersResponse> {
            return localVarFp.customerListCustomers(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerListCustomersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListCustomers2(body: CustomerListCustomersRequest, options?: any): AxiosPromise<CustomerListCustomersResponse> {
            return localVarFp.customerListCustomers2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListGroups(body: CustomerListGroupsRequest, options?: any): AxiosPromise<CustomerListGroupsResponse> {
            return localVarFp.customerListGroups(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerListGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListGroups2(body: CustomerListGroupsRequest, options?: any): AxiosPromise<CustomerListGroupsResponse> {
            return localVarFp.customerListGroups2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveCustomerFromGroup(body: CustomerRemoveCustomerFromGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerRemoveCustomerFromGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRemoveCustomerFromGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveCustomerFromGroup2(body: CustomerRemoveCustomerFromGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerRemoveCustomerFromGroup2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveDefaultAddress(body: CustomerRemoveDefaultAddressRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerRemoveDefaultAddress(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRemoveDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRemoveDefaultAddress2(body: CustomerRemoveDefaultAddressRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerRemoveDefaultAddress2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRevokePermissions(body: CustomerRevokePermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerRevokePermissions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerRevokePermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerRevokePermissions2(body: CustomerRevokePermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerRevokePermissions2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch(body: CustomerSearchRequest, options?: any): AxiosPromise<CustomerSearchResponse> {
            return localVarFp.customerSearch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSearchRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch2(body: CustomerSearchRequest, options?: any): AxiosPromise<CustomerSearchResponse> {
            return localVarFp.customerSearch2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetDefaultAddress(body: CustomerSetDefaultAddressRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerSetDefaultAddress(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSetDefaultAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetDefaultAddress2(body: CustomerSetDefaultAddressRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerSetDefaultAddress2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetPermissions(body: CustomerSetPermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerSetPermissions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerSetPermissionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSetPermissions2(body: CustomerSetPermissionsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerSetPermissions2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUnassignAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnassignAgent(body: CustomerUnassignAgentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.customerUnassignAgent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnsubscribe(body: CustomerUnsubscribeRequest, options?: any): AxiosPromise<CustomerUnsubscribeResponse> {
            return localVarFp.customerUnsubscribe(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUnsubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUnsubscribe2(body: CustomerUnsubscribeRequest, options?: any): AxiosPromise<CustomerUnsubscribeResponse> {
            return localVarFp.customerUnsubscribe2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate(body: CustomerUpdateRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate2(body: CustomerUpdateRequest, options?: any): AxiosPromise<CustomerCustomerResponse> {
            return localVarFp.customerUpdate2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateAddress(body: CustomerAddressUpdateRequest, options?: any): AxiosPromise<CustomerAddressUpdateResponse> {
            return localVarFp.customerUpdateAddress(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerAddressUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateAddress2(body: CustomerAddressUpdateRequest, options?: any): AxiosPromise<CustomerAddressUpdateResponse> {
            return localVarFp.customerUpdateAddress2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateGroup(body: CustomerUpdateGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerUpdateGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateGroup2(body: CustomerUpdateGroupRequest, options?: any): AxiosPromise<CustomerGroupResponse> {
            return localVarFp.customerUpdateGroup2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateSubscriber(body: CustomerUpdateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerUpdateSubscriber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerUpdateSubscriberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdateSubscriber2(body: CustomerUpdateSubscriberRequest, options?: any): AxiosPromise<CustomerSubscriberResponse> {
            return localVarFp.customerUpdateSubscriber2(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @param {CustomerCreateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAcquireSubscriber(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAcquireSubscriber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAcquireSubscriber2(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAcquireSubscriber2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUnsubscribeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAcquireUnsubscriber(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAcquireUnsubscriber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUnsubscribeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAcquireUnsubscriber2(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAcquireUnsubscriber2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddCustomerToGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAddCustomerToGroup(body: CustomerAddCustomerToGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAddCustomerToGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddCustomerToGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAddCustomerToGroup2(body: CustomerAddCustomerToGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAddCustomerToGroup2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAssignAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerAssignAgent(body: CustomerAssignAgentRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerAssignAgent(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerBulkUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerBulkUpdate(body: CustomerBulkUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerBulkUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerBulkUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerBulkUpdate2(body: CustomerBulkUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerBulkUpdate2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreate(body: CustomerCreateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreate2(body: CustomerCreateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreate2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateAddress(body: CustomerAddressCreateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateAddress(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateAddress2(body: CustomerAddressCreateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateAddress2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateGroup(body: CustomerCreateGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateGroup2(body: CustomerCreateGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateGroup2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateSubscriber(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateSubscriber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerCreateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreateSubscriber2(body: CustomerCreateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreateSubscriber2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerDeleteAddress(body: CustomerAddressDeleteRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerDeleteAddress(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerDeleteAddress2(body: CustomerAddressDeleteRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerDeleteAddress2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerDeleteGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerDeleteGroup(body: CustomerDeleteGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerDeleteGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerDeleteGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerDeleteGroup2(body: CustomerDeleteGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerDeleteGroup2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindManyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFind(body: CustomerFindManyRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFind(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindManyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFind2(body: CustomerFindManyRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFind2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindByEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindByEmail(body: CustomerFindByEmailRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindByEmail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindByEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindByEmail2(body: CustomerFindByEmailRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindByEmail2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindById(body: CustomerFindByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindById(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindById2(body: CustomerFindByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindById2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindSubscriberByEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindSubscriberByEmail(body: CustomerFindSubscriberByEmailRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindSubscriberByEmail(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindSubscriberByEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindSubscriberByEmail2(body: CustomerFindSubscriberByEmailRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindSubscriberByEmail2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindSubscriberByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindSubscriberById(body: CustomerFindSubscriberByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindSubscriberById(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerFindSubscriberByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerFindSubscriberById2(body: CustomerFindSubscriberByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerFindSubscriberById2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGetGroupByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGetGroupByCode(body: CustomerGetGroupByCodeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGetGroupByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGetGroupByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGetGroupByCode2(body: CustomerGetGroupByCodeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGetGroupByCode2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGetGroupByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGetGroupById(body: CustomerGetGroupByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGetGroupById(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGetGroupByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGetGroupById2(body: CustomerGetGroupByIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGetGroupById2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGrantPermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGrantPermissions(body: CustomerGrantPermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGrantPermissions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerGrantPermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGrantPermissions2(body: CustomerGrantPermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGrantPermissions2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListConsents list all consents of a customer
     * @param {CustomerListConsentsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerListConsents(body: CustomerListConsentsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerListConsents(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerListCustomersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerListCustomers(body: CustomerListCustomersRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerListCustomers(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerListCustomersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerListCustomers2(body: CustomerListCustomersRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerListCustomers2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerListGroupsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerListGroups(body: CustomerListGroupsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerListGroups(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerListGroupsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerListGroups2(body: CustomerListGroupsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerListGroups2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRemoveCustomerFromGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRemoveCustomerFromGroup(body: CustomerRemoveCustomerFromGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRemoveCustomerFromGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRemoveCustomerFromGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRemoveCustomerFromGroup2(body: CustomerRemoveCustomerFromGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRemoveCustomerFromGroup2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRemoveDefaultAddressRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRemoveDefaultAddress(body: CustomerRemoveDefaultAddressRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRemoveDefaultAddress(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRemoveDefaultAddressRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRemoveDefaultAddress2(body: CustomerRemoveDefaultAddressRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRemoveDefaultAddress2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRevokePermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRevokePermissions(body: CustomerRevokePermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRevokePermissions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerRevokePermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerRevokePermissions2(body: CustomerRevokePermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerRevokePermissions2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSearchRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSearch(body: CustomerSearchRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSearch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSearchRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSearch2(body: CustomerSearchRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSearch2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSetDefaultAddressRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSetDefaultAddress(body: CustomerSetDefaultAddressRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSetDefaultAddress(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSetDefaultAddressRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSetDefaultAddress2(body: CustomerSetDefaultAddressRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSetDefaultAddress2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSetPermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSetPermissions(body: CustomerSetPermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSetPermissions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerSetPermissionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSetPermissions2(body: CustomerSetPermissionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSetPermissions2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUnassignAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUnassignAgent(body: CustomerUnassignAgentRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUnassignAgent(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUnsubscribeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUnsubscribe(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUnsubscribe(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUnsubscribeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUnsubscribe2(body: CustomerUnsubscribeRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUnsubscribe2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdate(body: CustomerUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdate2(body: CustomerUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdate2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateAddress(body: CustomerAddressUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateAddress(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerAddressUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateAddress2(body: CustomerAddressUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateAddress2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateGroup(body: CustomerUpdateGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateGroup2(body: CustomerUpdateGroupRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateGroup2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateSubscriber(body: CustomerUpdateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateSubscriber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerUpdateSubscriberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdateSubscriber2(body: CustomerUpdateSubscriberRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdateSubscriber2(body, options).then((request) => request(this.axios, this.basePath));
    }
}



